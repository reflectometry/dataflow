;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function dtas_data::monitor_correction_factor,o = o, msg=msg
if n_elements(*self.data_ptr) eq 0 then return,0

msg = ''
doCorrection = 0
tol = 0.0001                     ; meV
fileExt = strupcase(self.extension)
nCols = n_tags(*self.data_ptr)
switch fileExt of
   ;; set the instrument-dependent correction coefficients
   'BT7':
   'BT9': begin
      ;;CF[Ei] = 6.123 - 0.5963*Ei
      ;;               + 0.026244* (Ei)^2
      ;;               - 0.0004843* (Ei)^3
      ;;               + 2.881x10^6* (Ei)^4
      M0 =  6.1230
      M1 = -5.9630e-1
      M2 =  2.6244e-2
      M3 = -4.8430e-4
      M4 =  2.8810e-6
      break
   end

   'NG5': begin
      ;;CF[Ei] = 1.2776 - 0.078968*Ei
      ;;                  + 0.0099952* (Ei)^2
      ;;                  - 0.00060495* (Ei)^3
      ;;                  + 1.4203x10^-5* (Ei)^4      
      M0 =  1.2776
      M1 = -7.8968e-2
      M2 =  9.9952e-3
      M3 = -6.0495e-4
      M4 =  1.4203e-5
      break
   end
   else: return, 0
endswitch
switch fileExt of
   'BT7': begin
      if (~self.isICE) then break
      ;; Is PG in use?
      if (strtrim(string(self.dspaceM,format='(F5.3)'),2) ne '3.354') then return, 0

      ;; Ensure Ei is NOT fixed by checking whether Ef IS fixed
      if (strupcase(self.fixedEType) ne 'EF') then return, 0
      Ef = self.fixedEValue
      if (Ef le 0.0) then return, 0
      ;; Get energy Transfer
      tags = strupcase(tag_names(*self.data_ptr))
      index = where(tags eq 'E',eFound)
      if (eFound ne 1) then return, 0
      eTransfer = (*(*self.data_ptr).(index[0]))

      doCorrection = 1
      break
   end

   'NG5':
   'BT9': begin
      if n_elements(*self.econfig_ptr) eq 0 then return,0
      ;if n_elements(*self.mcf_ptr) eq 0 then return,0 ; no longer used!
      if self.scan ne 'Q' then return,0
      tags = tag_names(*self.econfig_ptr)
      data_tags = tag_names(*self.data_ptr)
      if tags[2] eq 'EM' then return,0
      dsp = (*self.econfig_ptr).m_dsp
      ;; Ensure PG mono is in use
      if (strtrim(string(dsp,format='(F5.3)'),2) ne '3.354') then return, 0
      ea_index = where(tags eq 'EA')
      Ef = (*self.econfig_ptr).(ea_index[0])
      if (Ef le 0.0) then return, 0
      ;y = *(*self.data_ptr).(nCols-2)
      ;dy = *(*self.data_ptr).(nCols-1)
      ;mcf = *self.mcf_ptr
      ;e_mcf = reform(mcf[0,*]) - Ef
      ;c_mcf = reform(mcf[1,*])
      ;;; Interpolate the monitor correction factor data to the energy grid of
      ;;; the current file.
      ok1 = where(strupcase(data_tags) eq 'EMEV',count_emev)
      ok2 = where(strupcase(data_tags) eq 'E',count_e)
      epos = -1
      if count_emev gt 0 then epos = ok1[0]
      if count_e gt 0 then epos = ok2[0]
      if epos eq -1 then return, 0
      ;energy = *(*self.data_ptr).(epos)
      ;mcf_interpol = interpol(c_mcf,e_mcf,energy)
      ;y = y*mcf_interpol
      ;dy = dy*mcf_interpol
      eTransfer = *(*self.data_ptr).(epos)

      doCorrection = 1
      break
   end

   else: return, 0
endswitch

if (doCorrection) then begin
   ;; Check whether E (hence Ei) is varying
   nEt = n_elements(eTransfer)
   diff = eTransfer[1:nEt-1] - eTransfer[0:nEt-2]
   void = where(abs(diff) gt tol, eIsVarying)
   if (eIsVarying eq 0) then return, 0 
   Ei = double(Ef + eTransfer)  ; double necessary for calculation below

   monCor = fltarr(nEt)
   index = indgen(nEt)
   if (fileExt ne 'NG5') then begin
      ;; BT7 and BT9 have additional energy-dependent restrictions
      index = where(Ei ge 5 and Ei le 34, count)         
      if (count ne nEt) then begin
         void = where(Ei lt 5,cnt)
         if (cnt gt 0) then begin
            msg = 'Monitor correction not possible for incident energy values below 5 meV'
            void = dialog_message(msg,/error)
            return, 0
         endif
         
         indexAbove34 = where(Ei gt 34,EiAbove34)
         if (EiAbove34 gt 0) then monCor[indexAbove34] = 1.0
      endif
   endif
   Eii = Ei[index]

   monCor[index] = M0 + M1*Eii + M2*Eii^2 + M3*Eii^3 + M4*Eii^4
   print,self.filename
   print,'         E        Ei          Mon. Cor. Fac.'
   for i=0,nEt-1 do print,eTransfer[i],Ei[i],monCor[i]

   *(*self.data_ptr).(nCols-2) = *(*self.data_ptr).(nCols-2) * monCor
   *(*self.data_ptr).(nCols-1) = *(*self.data_ptr).(nCols-1) * monCor
   new_treatment = 'Monitor correction factor applied'
   ret = self->update_treatment(new_treatment)
   str = '_moncor'
   ret = self->update_display_name(str)
   self.ytitle = 'CORRECTED COUNTS'
   (*self.plot_ptr).ytitle = self.ytitle
endif

if arg_present(o) then o = self->clone()
return,1
end


function dtas_data::resolution_correction, o = o
if n_elements(*self.data_ptr) eq 0 then return,0

doCorrection = 0
tol = 0.0001                     ; meV
fileExt = strupcase(self.extension)
nCols = n_tags(*self.data_ptr)

switch fileExt of
   'BT7': begin
      if (~self.isICE) then break

      ;; Ensure Ef is NOT fixed by checking whether Ei IS fixed
      if (strupcase(self.fixedEType) ne 'EI') then return, 0
      Ei = self.fixedEValue
      if (Ei le 0.0) then return, 0
      ;; Get energy Transfer
      tags = strupcase(tag_names(*self.data_ptr))
      index = where(tags eq 'E',eFound)
      if (eFound ne 1) then return, 0
      eTransfer = (*(*self.data_ptr).(index[0]))
      ;; Check whether E (hence Ef) is varying
      nEt = n_elements(eTransfer)
      diff = eTransfer[1:nEt-1] - eTransfer[0:nEt-2]
      void = where(abs(diff) gt tol, eIsVarying)
      if (eIsVarying eq 0) then return, 0 
      Ef = double(Ei - eTransfer) ; double necessary for calculation below

      dA = self.dspaceM
      if (dA le 0.0) then return, 0

      ;; Get theta-A (=A6/2)
      index = where(tags eq 'A6',a6Found)
      if (a6Found ne 1) then return, 0
      A6 = (*(*self.data_ptr).(index[0]))
      thetaA = A6/2.0 *!pi/180.0 ; in radians!



      doCorrection = 1
      break
   end

   'NG5':
   'BT9': begin
      if n_elements(*self.econfig_ptr) eq 0 then return,0
      ;if n_elements(*self.mcf_ptr) eq 0 then return,0 ; no longer used!
      if self.scan ne 'Q' then return,0
      tags = tag_names(*self.econfig_ptr)
      data_tags = tag_names(*self.data_ptr)
      if tags[2] eq 'EA' then return,0
      em_index = where(tags eq 'EM')
      Ei = (*self.econfig_ptr).(em_index[0])
      if (Ei le 0.0) then return, 0
      ok1 = where(strupcase(data_tags) eq 'EMEV',count_emev)
      ok2 = where(strupcase(data_tags) eq 'E',count_e)
      epos = -1
      if count_emev gt 0 then epos = ok1[0]
      if count_e gt 0 then epos = ok2[0]
      if epos eq -1 then return, 0
      eTransfer = *(*self.data_ptr).(epos)
      ;; Check whether E (hence Ef) is varying
      nEt = n_elements(eTransfer)
      diff = eTransfer[1:nEt-1] - eTransfer[0:nEt-2]
      void = where(abs(diff) gt tol, eIsVarying)
      if (eIsVarying eq 0) then return, 0 
      Ef = double(Ei - eTransfer) ; double necessary for calculation below
      ;; Determine theta-A (=A6/2)
      dA = (*self.econfig_ptr).a_dsp
      if (dA le 0.0) then return, 0
      lambdaA = sqrt(81.80425/Ef)
      thetaA = asin(lambdaA/(2.0*dA)) ; in radians!
      
      doCorrection = 1
      break
   end

   else: return, 0
endswitch
if (doCorrection) then begin
   ;; resCor = Norm/(cot(A6/2)*Ef^1.5)
   ;; where Norm = Ei^1.5 * cot(asin(!pi/(0.69472*dA*sqrt(Ei))))
   arg = asin(!pi/(0.6947*dA*sqrt(double(Ei))))
   norm = (Ei^1.5) / tan(arg)
   cotThetaA = 1/tan(thetaA)
   resCor = norm/(cotThetaA * (Ef^1.5))

   print,self.filename
   for i=0,nEt-1 do print,eTransfer[i],Ef[i],resCor[i]

   *(*self.data_ptr).(nCols-2) = *(*self.data_ptr).(nCols-2) * resCor
   *(*self.data_ptr).(nCols-1) = *(*self.data_ptr).(nCols-1) * resCor
   new_treatment = 'Corrected for resolution volume'
   ret = self->update_treatment(new_treatment)
   str = '_rescor'
   ret = self->update_display_name(str)
   self.ytitle = 'CORRECTED COUNTS'
   (*self.plot_ptr).ytitle = self.ytitle
endif

; if (self.scan ne 'Q') then return,0
; ; Calculate the resolution volume correction factor (unscaled)
; tags = tag_names(*self.econfig_ptr)
; if tags[2] eq 'EM' then begin
;       em = (*self.econfig_ptr).em
;       lambda_m = sqrt(81.80425/em)
;       dm = (*self.econfig_ptr).m_dsp
;       theta_m = asin(lambda_m/(2.0*dm))
;       dtags = tag_names(*self.data_ptr)
;       e_index = where(strupcase(dtags) eq 'E')
;       ea = em - *(*self.data_ptr).(e_index[0])
;       lambda_a = sqrt(81.80425/ea)
;       da = (*self.econfig_ptr).a_dsp
;       theta_a = asin(lambda_a/(2.0*da))
; endif else begin
;       return,0
; endelse
; ko = 2.0*!dpi/lambda_m
; kf = 2.0*!dpi/lambda_a
; cot_thetam = 1.0/tan(theta_m)
; cot_thetaa = 1.0/tan(theta_a)
; ; Calculate the scale factor "AMP" such that the resolution volume
; ; correction always is unity at the elastic position.
; if da eq dm then amp = 1.0 else $
;    amp = sqrt(((da*ko)^2 - (!pi)^2)/(((dm*ko)^2 - (!pi)^2)))
; r = amp*((ko/kf)^3)*cot_thetam/cot_thetaa
;    ; Normalize the correction factor to 1 at a point as close to the elastic line
;    ; as possible.
; energy = *(*self.data_ptr).(e_index[0])
; ;min_energy = min(abs(energy),imin)
; ;r = r/r[imin]
; ntags = n_tags(*self.data_ptr)
; *(*self.data_ptr).(ntags-2) = r*(*(*self.data_ptr).(ntags-2))
; *(*self.data_ptr).(ntags-1) = r*(*(*self.data_ptr).(ntags-1))
; new_treatment = 'Corrected for resolution volume'
; ret = self->update_treatment(new_treatment)
; str = '_rescor'
; ret = self->update_display_name(str)
; self.ytitle = 'CORRECTED COUNTS'
; (*self.plot_ptr).ytitle = self.ytitle


if arg_present(o) then o = self->clone()
return,1
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function dtas_data::detailed_balance, o = o,msg = msg
msg = ''
if n_elements(*self.data_ptr) eq 0 then return,0
if self.scan ne 'Q' then return,0
tags = tag_names(*self.data_ptr)
ok1 = where(strupcase(tags) eq 'EMEV',count_emev)
ok2 = where(strupcase(tags) eq 'E',count_e)
epos = -1
if count_emev gt 0 then epos = ok1[0]
if count_e gt 0 then epos = ok2[0]
if epos eq -1 then return,0
tpos = -1
ok3 = where(strupcase(tags) eq 'TACT',count_tact)
ok4 = where(strupcase(tags) eq 'T',count_t)
if count_tact gt 0 then tpos = ok3[0]
if count_t gt 0 then tpos = ok4[0]
if tpos eq -1 then return,0

ntitles = n_elements(tags)
energy = *(*self.data_ptr).(epos)
temperature = *(*self.data_ptr).(tpos)
where_zero_temp = where(temperature eq 0.0, count_zero)
if count_zero gt 1 then begin
   msg = 'There are temperatures with a value of 0'
   return,0
endif
y = *(*self.data_ptr).(ntitles-2)
dy = *(*self.data_ptr).(ntitles-1)
db_factor = exp(-0.5*11.6*energy/temperature)
y = y*db_factor
dy = dy*db_factor
*(*self.data_ptr).(ntitles-2) = y
*(*self.data_ptr).(ntitles-1) = dy
new_treatment = 'Corrected for detailed balance'
ret = self->update_treatment(new_treatment)
str = '_sym'
ret = self->update_display_name(str)
self.ytitle = 'CORRECTED COUNTS'
(*self.plot_ptr).ytitle = self.ytitle
if arg_present(o) then o = self->clone()
return,1
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
function dtas_data::udpate_descriptr,  TEMPERATURE = temperature
if keyword_set(temperature) then begin
   ; Is the temperature column defined?
   tags = tag_names(*self.data_ptr)
   where_temperature = where((strupcase(tags) eq "TACT") or $
      (strupcase(tags) eq "TEMP"),count)
   if count eq 0 then return,0
   data = *self.data_ptr
   temperature = *data.(where_temperature[0])
   if n_elements(temperature) gt 1 then begin
      ave_temp = (moment(temperature))[0]
   endif else begin
      ave_temp = temperature[0]
   endelse
   print,'Temperature: ',ave_temp
   dstr =   {  descriptrstr,           $
               name:'Temperature',   $
               units:'K',              $
               legend:'T (K)',         $
               qty:ave_temp,           $
               err:0.0                 }
   *self.descriptr = dstr
endif

return,1
end










